generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ApiKey {
  id                    String            @id @default(cuid())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  apiKey                String            @unique
  status                ApiKeyStatus
  permission            Permission
  usageLimited          Boolean           @default(false)
  RemainingUsageCredits UsageAmount[]
  PurchaseRequest       PurchaseRequest[]
}

model UsageAmount {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    BigInt
  unit      String
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id])
  apiKeyId  String?
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
}

enum Permission {
  READ
  READ_PAY
  ADMIN
}

model SellingWallet {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  walletVkey     String       @unique
  WalletSecret   WalletSecret @relation(fields: [walletSecretId], references: [id])
  walletSecretId String
  walletAddress  String

  PendingTransaction   Transaction? @relation(fields: [pendingTransactionId], references: [id], onDelete: SetNull)
  pendingTransactionId String?

  NetworkHandler   NetworkHandler @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  note           String?
  PaymentRequest PaymentRequest[]

  @@unique([networkHandlerId, walletVkey])
}

model PurchasingWallet {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  walletVkey     String
  WalletSecret   WalletSecret @relation(fields: [walletSecretId], references: [id])
  walletSecretId String
  walletAddress  String

  PendingTransaction   Transaction? @relation(fields: [pendingTransactionId], references: [id], onDelete: SetNull)
  pendingTransactionId String?

  NetworkHandler   NetworkHandler    @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String
  note             String?
  PurchaseRequest  PurchaseRequest[]

  @@unique([networkHandlerId, walletVkey])
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hash             String? //null if not yet send out
  lastCheckedAt    DateTime?
  SellingWallet    SellingWallet[]
  PurchasingWallet PurchasingWallet[]
}

model WalletSecret {
  id                String             @id @default(cuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  secret            String //encrypted 
  SellingWallets    SellingWallet[]
  PurchasingWallets PurchasingWallet[]
}

model BuyerWallet {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  walletVkey String

  NetworkHandler   NetworkHandler @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  note           String?
  PaymentRequest PaymentRequest[]

  @@unique([networkHandlerId, walletVkey])
}

model SellerWallet {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  walletVkey String

  NetworkHandler   NetworkHandler @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  note            String?
  PurchaseRequest PurchaseRequest[]

  @@unique([networkHandlerId, walletVkey])
}

model CollectionWallet {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  walletAddress String

  NetworkHandler   NetworkHandler @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String         @unique
  note             String?

  @@unique([networkHandlerId, walletAddress])
}

model PaymentRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt    DateTime?
  NetworkHandler   NetworkHandler @relation("PaymentRequestHandler", fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  SmartContractWallet   SellingWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  BuyerWallet   BuyerWallet? @relation(fields: [buyerWalletId], references: [id], onDelete: SetNull)
  buyerWalletId String?

  Amounts          RequestAmount[]
  status           PaymentRequestStatus
  identifier       String
  resultHash       String?
  submitResultTime BigInt
  unlockTime       BigInt
  refundTime       BigInt
  utxo             String?
  txHash           String?
  potentialTxHash  String?

  errorRetries              Int                      @default(0)
  errorType                 PaymentRequestErrorType?
  errorNote                 String?
  errorRequiresManualReview Boolean?

  @@unique([networkHandlerId, identifier])
}

model PurchaseRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt    DateTime?
  NetworkHandler   NetworkHandler @relation("PurchaseRequestNetworkHandler", fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  SellerWallet   SellerWallet @relation(fields: [sellerWalletId], references: [id], onDelete: Cascade)
  sellerWalletId String

  SmartContractWallet   PurchasingWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  Amounts          RequestAmount[]
  status           PurchasingRequestStatus
  identifier       String
  resultHash       String?
  submitResultTime BigInt
  unlockTime       BigInt
  refundTime       BigInt

  utxo            String?
  txHash          String?
  potentialTxHash String?

  errorRetries              Int                       @default(0)
  errorType                 PurchaseRequestErrorType?
  errorNote                 String?
  errorRequiresManualReview Boolean?

  triggeredBy   ApiKey @relation(fields: [triggeredById], references: [id])
  triggeredById String

  @@unique([networkHandlerId, identifier, sellerWalletId])
}

model RequestAmount {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  amount            BigInt
  unit              String
  PaymentRequest    PaymentRequest?  @relation(fields: [paymentRequestId], references: [id], onDelete: SetNull)
  paymentRequestId  String?
  PurchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id], onDelete: SetNull)
  purchaseRequestId String?
}

enum PaymentRequestErrorType {
  NETWORK_ERROR
  UNKNOWN
}

enum PurchaseRequestErrorType {
  NETWORK_ERROR
  INSUFFICIENT_FUNDS
  UNKNOWN
}

enum PaymentType {
  WEB3_CARDANO_V1
}

enum PaymentRequestStatus {
  PaymentRequested

  PaymentConfirmed
  PaymentInvalid

  ResultGenerated

  CompletedInitiated
  CompletedConfirmed

  Denied

  RefundRequested

  Refunded

  WithdrawnInitiated
  WithdrawnConfirmed

  DisputedWithdrawn
}

enum PurchasingRequestStatus {
  PurchaseRequested

  PurchaseInitiated
  PurchaseConfirmed

  Completed

  RefundRequestInitiated
  RefundRequestConfirmed

  RefundInitiated
  RefundConfirmed

  RefundRequestCanceledInitiated

  Withdrawn

  DisputedWithdrawn
}

model NetworkHandler {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  network                Network
  lastCheckedAt          DateTime?
  lastPageChecked        Int       @default(1)
  rpcProviderApiKey      String
  lastIdentifierChecked  String?
  paymentContractAddress String
  isSyncing              Boolean   @default(false)

  AdminWallets             AdminWallet[] @relation("AdminWallets")
  FeeReceiverNetworkWallet AdminWallet   @relation("FeeReceiverNetworkWallet", fields: [adminWalletId], references: [id], onDelete: Cascade)
  adminWalletId            String
  feePermille              Int           @default(50)

  PaymentRequests  PaymentRequest[]  @relation("PaymentRequestHandler")
  PurchaseRequests PurchaseRequest[] @relation("PurchaseRequestNetworkHandler")

  CollectionWallet  CollectionWallet?
  paymentType       PaymentType
  BuyerWallets      BuyerWallet[]
  SellerWallets     SellerWallet[]
  SellingWallets    SellingWallet[]
  PurchasingWallets PurchasingWallet[]

  maxCollectRefundRetries  Int @default(3)
  maxCollectPaymentRetries Int @default(3)
  maxCollectionRetries     Int @default(3)
  maxRefundRetries         Int @default(3)
  maxPaymentRetries        Int @default(3)
  maxRefundDenyRetries     Int @default(3)

  @@unique([network, paymentContractAddress])
}

model AdminWallet {
  id                    String          @id @default(cuid())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  walletAddress         String
  NetworkHandlerAdmin   NetworkHandler? @relation("AdminWallets", fields: [networkHandlerAdminId], references: [id], onDelete: SetNull)
  networkHandlerAdminId String?
  order                 Int

  NetworkHandlerFeeReceiver NetworkHandler[] @relation("FeeReceiverNetworkWallet")
}

enum Network {
  PREPROD
  MAINNET
}
