generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ApiKey {
  id                    String            @id @default(cuid())
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  token                 String            @unique
  status                ApiKeyStatus
  permission            Permission
  networkLimit          Network[]
  usageLimited          Boolean           @default(false)
  RemainingUsageCredits UsageCredit[]
  PurchaseRequest       PurchaseRequest[]
  PaymentRequest        PaymentRequest[]
  deletedAt             DateTime?
}

model UsageCredit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    BigInt
  unit      String
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id])
  apiKeyId  String?
}

enum ApiKeyStatus {
  Active
  Revoked
}

enum Permission {
  Read
  ReadAndPay
  Admin
}

enum HotWalletType {
  Selling
  Purchasing
}

model HotWallet {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  walletVkey    String
  walletAddress String
  type          HotWalletType

  Secret   WalletSecret @relation(fields: [secretId], references: [id])
  secretId String

  collectionAddress String?

  PendingTransaction   Transaction? @relation(fields: [pendingTransactionId], references: [id], onDelete: SetNull)
  pendingTransactionId String?      @unique

  PurchaseRequest PurchaseRequest[]
  PaymentRequest  PaymentRequest[]

  PaymentSource   PaymentSource @relation(fields: [paymentSourceId], references: [id], onDelete: Cascade)
  paymentSourceId String

  lockedAt DateTime?

  note            String?
  RegistryRequest RegistryRequest[]

  @@unique([paymentSourceId, walletVkey])
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  txHash String

  status TransactionStatus

  lastCheckedAt           DateTime?
  BlocksWallet            HotWallet?
  PaymentRequestCurrent   PaymentRequest? @relation("CurrentPaymentTransaction")
  PaymentRequestHistory   PaymentRequest? @relation("PaymentTransactionHistory", fields: [paymentRequestHistoryId], references: [id])
  paymentRequestHistoryId String?

  PurchaseRequestCurrent   PurchaseRequest?  @relation("CurrentPurchaseTransaction")
  PurchaseRequestHistory   PurchaseRequest?  @relation("PurchaseTransactionHistory", fields: [purchaseRequestHistoryId], references: [id])
  purchaseRequestHistoryId String?
  RegistryRequest          RegistryRequest[]
}

model WalletSecret {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  encryptedMnemonic String //encrypted mnemonic

  HotWallet HotWallet[]
}

enum WalletType {
  Buyer
  Seller
}

model WalletBase {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  walletVkey String
  note       String?
  type       WalletType

  PaymentRequest  PaymentRequest[]
  PurchaseRequest PurchaseRequest[]
  PaymentSource   PaymentSource     @relation(fields: [paymentSourceId], references: [id])
  paymentSourceId String

  @@unique([paymentSourceId, walletVkey, type])
}

enum RegistrationState {
  RegistrationRequested
  RegistrationInitiated
  RegistrationConfirmed
  RegistrationFailed

  DeregistrationRequested
  DeregistrationInitiated
  DeregistrationConfirmed
  DeregistrationFailed
}

model RegistryRequest {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastCheckedAt DateTime?

  paymentSourceId String
  PaymentSource   PaymentSource @relation(fields: [paymentSourceId], references: [id])

  SmartContractWallet   HotWallet @relation(fields: [smartContractWalletId], references: [id], onDelete: Restrict)
  smartContractWalletId String

  name               String
  api_url            String
  capability_name    String
  capability_version String

  description       String?
  requests_per_hour String?
  privacy_policy    String?
  terms             String?
  other             String?

  author_name         String
  author_contact      String?
  author_organization String?

  tags    String[]
  Pricing AgentPricing[]

  agentIdentifier String?           @unique
  state           RegistrationState

  CurrentTransaction   Transaction? @relation(fields: [currentTransactionId], references: [id])
  currentTransactionId String?
}

model AgentPricing {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  unit              String
  quantity          BigInt
  RegistryRequest   RegistryRequest? @relation(fields: [registryRequestId], references: [id])
  registryRequestId String?
}

model PaymentRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt   DateTime?
  PaymentSource   PaymentSource @relation("PaymentRequestPaymentSource", fields: [paymentSourceId], references: [id], onDelete: Cascade)
  paymentSourceId String

  SmartContractWallet   HotWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  BuyerWallet   WalletBase? @relation(fields: [buyerWalletId], references: [id], onDelete: SetNull)
  buyerWalletId String?

  NextAction   PaymentActionData @relation("NextAction", fields: [nextActionId], references: [id])
  nextActionId String            @unique

  metadata String?

  Amounts RequestAmount[]

  blockchainIdentifier String
  submitResultTime     BigInt
  unlockTime           BigInt
  refundTime           BigInt
  resultHash           String
  onChainState         OnChainState?

  sellerCoolDownTime BigInt
  buyerCoolDownTime  BigInt

  requestedBy          ApiKey        @relation(fields: [requestedById], references: [id])
  requestedById        String
  TransactionHistory   Transaction[] @relation("PaymentTransactionHistory")
  CurrentTransaction   Transaction?  @relation("CurrentPaymentTransaction", fields: [currentTransactionId], references: [id])
  currentTransactionId String?       @unique

  @@unique([paymentSourceId, blockchainIdentifier])
}

model PaymentActionData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedAction PaymentAction
  resultHash      String?

  submittedTxHash String?

  errorType PaymentErrorType?
  errorNote String?

  PaymentRequestCurrent PaymentRequest? @relation("NextAction")
}

model PurchaseRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt   DateTime?
  PaymentSource   PaymentSource @relation("PurchaseRequestPaymentSource", fields: [paymentSourceId], references: [id], onDelete: Cascade)
  paymentSourceId String

  SellerWallet   WalletBase @relation(fields: [sellerWalletId], references: [id], onDelete: Cascade)
  sellerWalletId String

  SmartContractWallet   HotWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  metadata String?

  Amounts              RequestAmount[]
  blockchainIdentifier String

  submitResultTime BigInt
  unlockTime       BigInt
  refundTime       BigInt
  resultHash       String
  onChainState     OnChainState?

  sellerCoolDownTime BigInt
  buyerCoolDownTime  BigInt

  NextAction   PurchaseActionData @relation("NextAction", fields: [nextActionId], references: [id])
  nextActionId String             @unique

  requestedBy          ApiKey        @relation(fields: [requestedById], references: [id])
  requestedById        String
  CurrentTransaction   Transaction?  @relation("CurrentPurchaseTransaction", fields: [currentTransactionId], references: [id])
  currentTransactionId String?       @unique
  TransactionHistory   Transaction[] @relation("PurchaseTransactionHistory")

  @@unique([paymentSourceId, blockchainIdentifier])
}

model PurchaseActionData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestedAction PurchasingAction

  submittedTxHash String?

  errorType PurchaseErrorType?
  errorNote String?

  PurchaseRequestCurrent PurchaseRequest? @relation("NextAction")
}

model RequestAmount {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  amount            BigInt
  unit              String
  PaymentRequest    PaymentRequest?  @relation(fields: [paymentRequestId], references: [id], onDelete: SetNull)
  paymentRequestId  String?
  PurchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id], onDelete: SetNull)
  purchaseRequestId String?
}

enum PaymentErrorType {
  NetworkError
  Unknown
}

enum PurchaseErrorType {
  NetworkError
  InsufficientFunds
  Unknown
}

enum PaymentType {
  Web3CardanoV1
}

enum TransactionStatus {
  Pending
  Confirmed
  FailedViaTimeout
}

enum OnChainState {
  FundsLocked
  FundsOrDatumInvalid
  ResultSubmitted
  RefundRequested
  Disputed
  Withdrawn
  RefundWithdrawn
  DisputedWithdrawn
}

enum PaymentAction {
  None
  Ignore
  WaitingForManualAction
  WaitingForExternalAction

  SubmitResultRequested
  SubmitResultInitiated

  WithdrawRequested
  WithdrawInitiated

  AuthorizeRefundRequested
  AuthorizeRefundInitiated
}

enum PurchasingAction {
  None
  Ignore
  WaitingForManualAction
  WaitingForExternalAction

  FundsLockingRequested
  FundsLockingInitiated

  SetRefundRequestedRequested
  SetRefundRequestedInitiated

  UnSetRefundRequestedRequested
  UnSetRefundRequestedInitiated

  WithdrawRefundRequested
  WithdrawRefundInitiated
}

model PaymentSource {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  network       Network
  lastCheckedAt DateTime?

  lastIdentifierChecked String?
  syncInProgress        Boolean @default(false)

  smartContractAddress     String
  AdminWallets             AdminWallet[] @relation("AdminWallets")
  FeeReceiverNetworkWallet AdminWallet   @relation("FeeReceiverNetworkWallet", fields: [adminWalletId], references: [id], onDelete: Cascade)
  adminWalletId            String
  feeRatePermille          Int           @default(50)
  cooldownTime             Int           @default(600000)

  PaymentSourceConfig   PaymentSourceConfig @relation(fields: [paymentSourceConfigId], references: [id])
  paymentSourceConfigId String              @unique

  PaymentRequests  PaymentRequest[]  @relation("PaymentRequestPaymentSource")
  PurchaseRequests PurchaseRequest[] @relation("PurchaseRequestPaymentSource")

  paymentType PaymentType

  HotWallets      HotWallet[]
  WalletBases     WalletBase[]
  RegistryRequest RegistryRequest[]

  @@unique([network, smartContractAddress])
}

model AdminWallet {
  id                   String         @id @default(cuid())
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  walletAddress        String
  PaymentSourceAdmin   PaymentSource? @relation("AdminWallets", fields: [paymentSourceAdminId], references: [id], onDelete: SetNull)
  paymentSourceAdminId String?
  order                Int

  PaymentSourceFeeReceiver PaymentSource[] @relation("FeeReceiverNetworkWallet")
}

enum Network {
  Preprod
  Mainnet
}

enum RPCProvider {
  Blockfrost
}

model PaymentSourceConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rpcProviderApiKey String
  rpcProvider       RPCProvider
  PaymentSource     PaymentSource?
}
