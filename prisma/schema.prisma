generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model ApiKey {
  id                        String                      @id @default(cuid())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  apiKey                    String                      @unique
  status                    ApiKeyStatus
  permission                Permission
  usageLimited              Boolean                     @default(false)
  RemainingUsageCredits     UsageAmount[]
  PurchaseRequest           PurchaseRequest[]
  PaymentRequest            PaymentRequest[]
  PaymentRequestStatusData  PaymentRequestStatusData[]
  PurchaseRequestStatusData PurchaseRequestStatusData[]
  deletedAt                 DateTime?
}

model UsageAmount {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    BigInt
  unit      String
  apiKey    ApiKey?  @relation(fields: [apiKeyId], references: [id])
  apiKeyId  String?
}

enum ApiKeyStatus {
  ACTIVE
  REVOKED
}

enum Permission {
  READ
  READ_PAY
  ADMIN
}

enum HotWalletType {
  SELLING
  PURCHASING
}

model HotWallet {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  walletVkey    String
  walletAddress String
  type          HotWalletType

  Secret   WalletSecret @relation(fields: [secretId], references: [id])
  secretId String

  collectionAddress String?

  PendingTransaction   Transaction? @relation(fields: [pendingTransactionId], references: [id], onDelete: SetNull)
  pendingTransactionId String?      @unique

  PurchaseRequest PurchaseRequest[]
  PaymentRequest  PaymentRequest[]

  NetworkHandler   NetworkHandler @relation(fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  note String?

  @@unique([networkHandlerId, walletVkey])
}

model Transaction {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  txHash String?

  lastCheckedAt             DateTime?
  BlocksWallet              HotWallet?
  PaymentRequestStatusData  PaymentRequestStatusData[]
  PurchaseRequestStatusData PurchaseRequestStatusData[]
}

model WalletSecret {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  secret    String //encrypted 

  HotWallet HotWallet[]
}

enum WalletType {
  BUYER
  SELLER
}

model WalletBase {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  walletVkey String
  note       String?
  type       WalletType

  PaymentRequest   PaymentRequest[]
  PurchaseRequest  PurchaseRequest[]
  NetworkHandler   NetworkHandler    @relation(fields: [networkHandlerId], references: [id])
  networkHandlerId String

  @@unique([networkHandlerId, walletVkey, type])
}

model PaymentRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt    DateTime?
  NetworkHandler   NetworkHandler @relation("PaymentRequestHandler", fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  SmartContractWallet   HotWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  BuyerWallet   WalletBase? @relation(fields: [buyerWalletId], references: [id], onDelete: SetNull)
  buyerWalletId String?

  CurrentStatus   PaymentRequestStatusData @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  currentStatusId String                   @unique

  StatusHistory PaymentRequestStatusData[] @relation("StatusHistory")

  metadata String?

  Amounts RequestAmount[]

  blockchainIdentifier String
  submitResultTime     BigInt
  unlockTime           BigInt
  refundTime           BigInt

  requestedBy   ApiKey @relation(fields: [requestedById], references: [id])
  requestedById String

  @@unique([networkHandlerId, blockchainIdentifier])
}

model PaymentRequestStatusData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  timestamp DateTime
  status    PaymentRequestStatus

  resultHash         String?
  cooldownTimeSeller BigInt?
  cooldownTimeBuyer  BigInt?

  Transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId String?

  errorType                 PaymentRequestErrorType?
  errorNote                 String?
  errorRequiresManualReview Boolean?

  requestedBy           ApiKey?         @relation(fields: [requestedById], references: [id])
  requestedById         String?
  PaymentRequestCurrent PaymentRequest? @relation("CurrentStatus")
  PaymentRequestHistory PaymentRequest? @relation("StatusHistory", fields: [paymentRequestId], references: [id])
  paymentRequestId      String?

  @@unique([paymentRequestId, timestamp])
}

model PurchaseRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lastCheckedAt    DateTime?
  NetworkHandler   NetworkHandler @relation("PurchaseRequestNetworkHandler", fields: [networkHandlerId], references: [id], onDelete: Cascade)
  networkHandlerId String

  SellerWallet   WalletBase @relation(fields: [sellerWalletId], references: [id], onDelete: Cascade)
  sellerWalletId String

  SmartContractWallet   HotWallet? @relation(fields: [smartContractWalletId], references: [id], onDelete: SetNull)
  smartContractWalletId String?

  metadata String?

  Amounts              RequestAmount[]
  blockchainIdentifier String

  submitResultTime BigInt
  unlockTime       BigInt
  refundTime       BigInt

  CurrentStatus   PurchaseRequestStatusData   @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  currentStatusId String                      @unique
  StatusHistory   PurchaseRequestStatusData[] @relation("StatusHistory")

  requestedBy   ApiKey @relation(fields: [requestedById], references: [id])
  requestedById String

  @@unique([networkHandlerId, blockchainIdentifier, sellerWalletId])
}

model PurchaseRequestStatusData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  timestamp DateTime
  status    PurchasingRequestStatus

  resultHash         String?
  cooldownTimeSeller BigInt?
  cooldownTimeBuyer  BigInt?

  Transaction   Transaction? @relation(fields: [transactionId], references: [id], onDelete: SetNull)
  transactionId String?

  errorType                 PurchaseRequestErrorType?
  errorNote                 String?
  errorRequiresManualReview Boolean?

  PurchaseRequest        PurchaseRequest? @relation("StatusHistory", fields: [purchaseRequestId], references: [id])
  purchaseRequestId      String?
  PurchaseRequestCurrent PurchaseRequest? @relation("CurrentStatus")

  requestedBy   ApiKey? @relation(fields: [requestedById], references: [id])
  requestedById String?

  @@unique([purchaseRequestId, timestamp])
}

model RequestAmount {
  id                String           @id @default(cuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  amount            BigInt
  unit              String
  PaymentRequest    PaymentRequest?  @relation(fields: [paymentRequestId], references: [id], onDelete: SetNull)
  paymentRequestId  String?
  PurchaseRequest   PurchaseRequest? @relation(fields: [purchaseRequestId], references: [id], onDelete: SetNull)
  purchaseRequestId String?
}

enum PaymentRequestErrorType {
  NETWORK_ERROR
  UNKNOWN
}

enum PurchaseRequestErrorType {
  NETWORK_ERROR
  INSUFFICIENT_FUNDS
  UNKNOWN
}

enum PaymentType {
  WEB3_CARDANO_V1
}

enum PaymentRequestStatus {
  PaymentRequested

  PaymentConfirmed
  PaymentInvalid

  ResultGenerated

  CompletedInitiated
  CompletedConfirmed

  Denied

  RefundRequested

  Refunded

  WithdrawnInitiated
  WithdrawnConfirmed

  DisputedWithdrawn
}

enum PurchasingRequestStatus {
  PurchaseRequested

  PurchaseInitiated
  PurchaseConfirmed

  Completed

  RefundRequestInitiated
  RefundRequestConfirmed

  RefundInitiated
  RefundConfirmed

  RefundRequestCanceledInitiated

  Withdrawn

  DisputedWithdrawn
}

model NetworkHandler {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  network       Network
  lastCheckedAt DateTime?

  lastIdentifierChecked String?
  isSyncing             Boolean @default(false)

  paymentContractAddress   String
  AdminWallets             AdminWallet[] @relation("AdminWallets")
  FeeReceiverNetworkWallet AdminWallet   @relation("FeeReceiverNetworkWallet", fields: [adminWalletId], references: [id], onDelete: Cascade)
  adminWalletId            String
  feePermille              Int           @default(50)
  cooldownTime             Int           @default(600000)

  NetworkHandlerConfig   NetworkHandlerConfig @relation(fields: [networkHandlerConfigId], references: [id])
  networkHandlerConfigId String               @unique

  PaymentRequests  PaymentRequest[]  @relation("PaymentRequestHandler")
  PurchaseRequests PurchaseRequest[] @relation("PurchaseRequestNetworkHandler")

  paymentType PaymentType

  HotWallets  HotWallet[]
  WalletBases WalletBase[]

  @@unique([network, paymentContractAddress])
}

model AdminWallet {
  id                    String          @id @default(cuid())
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  walletAddress         String
  NetworkHandlerAdmin   NetworkHandler? @relation("AdminWallets", fields: [networkHandlerAdminId], references: [id], onDelete: SetNull)
  networkHandlerAdminId String?
  order                 Int

  NetworkHandlerFeeReceiver NetworkHandler[] @relation("FeeReceiverNetworkWallet")
}

enum Network {
  PREPROD
  MAINNET
}

model NetworkHandlerConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rpcProviderApiKey String
  NetworkHandler    NetworkHandler?
}
